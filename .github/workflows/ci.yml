---
name: Run gating CI for PR
# This workflow validates pull requests for commit formatting and CI status labels
on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
      - unlabeled

jobs:
  check-commits:
    if: ${{ github.event.pull_request.base.sha && github.event.pull_request.head.sha }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # force fetch all history
      - run: git config --global --add safe.directory $PWD
      - run: ./check-commits "${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}"

  check-labels:
    if: ${{ github.event_name == 'pull_request' && 
            (github.event.action == 'opened' ||
             github.event.action == 'reopened' || 
             github.event.action == 'labeled' || 
             github.event.action == 'unlabeled' || 
             github.event.action == 'synchronize') }}
    runs-on: ubuntu-latest
    permissions:
      statuses: write
      contents: read
      pull-requests: read
    steps:
      - name: Check for ci-passed label and ci-gate status
        uses: actions/github-script@v7
        with:
          script: |
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const labelNames = labels.data.map(label => label.name);
            const hasPassed = labelNames.includes('ci-passed');
            const hasFailed = labelNames.includes('ci-failed');
            const hasGate = labelNames.includes('ci-gate');

            if (hasGate) {
              // Set pending status using commit status API
              try {
                await github.rest.repos.createCommitStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.sha,
                  state: 'pending',
                  description: 'CI is in-progress',
                  context: 'ci-gate-status'
                });
                console.log("CI is in-progress - status set to pending");
              } catch (error) {
                console.log("Could not set commit status, but CI is in-progress");
                console.log("Note: 'ci-gate' label indicates CI is running");
              }
            } else if (hasFailed) {
              core.setFailed("'ci-failed' - Fix code and re-run CI");
            } else if (hasPassed) {
              console.log("CI labels look good â€” 'ci-passed' present, 'ci-gate' not present.");
            } else {
              core.setFailed("Missing 'ci-passed' label. Trigger CI by adding 'ci-gate' label");
            }
